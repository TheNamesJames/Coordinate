//
//  CoordinateStyleKit.swift
//  Coordinate
//
//  Created by James on 19/04/2016.
//  Copyright (c) 2016 . All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class CoordinateStyleKit : NSObject {

    //// Cache

    private struct Cache {
        static let borderColor: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
    }

    //// Colors

    public class var borderColor: UIColor { return Cache.borderColor }

    //// Drawing Methods

    public class func drawRoundedContact(backgroundColor backgroundColor: UIColor = UIColor(red: 0.118, green: 0.247, blue: 0.121, alpha: 1.000), textColor: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000), initialsText: String = "...", showIndex: Bool = true, indexText: String = "QQ") {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let indexBackground = backgroundColor.colorWithHighlight(0.3)

        //// Variable Declarations
        let initialsSize = CGSize(width: 32, height: 16)
        let indexSize = CGSize(width: 10, height: 10)

        //// Index Drawing
        let indexPath = UIBezierPath(ovalInRect: CGRect(x: 0, y: 0, width: 36, height: 36))
        backgroundColor.setFill()
        indexPath.fill()
        CoordinateStyleKit.borderColor.setStroke()
        indexPath.lineWidth = 1
        indexPath.stroke()


        //// Initials Drawing
        let initialsRect = CGRect(x: 2, y: 10, width: initialsSize.width, height: initialsSize.height)
        let initialsStyle = NSMutableParagraphStyle()
        initialsStyle.alignment = .Center

        let initialsFontAttributes = [NSFontAttributeName: UIFont.systemFontOfSize(16), NSForegroundColorAttributeName: textColor, NSParagraphStyleAttributeName: initialsStyle]

        let initialsTextHeight: CGFloat = NSString(string: initialsText).boundingRectWithSize(CGSize(width: initialsRect.width, height: CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: initialsFontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, initialsRect)
        NSString(string: initialsText).drawInRect(CGRect(x: initialsRect.minX, y: initialsRect.minY + (initialsRect.height - initialsTextHeight) / 2, width: initialsRect.width, height: initialsTextHeight), withAttributes: initialsFontAttributes)
        CGContextRestoreGState(context)


        if (showIndex) {
            //// Main Drawing
            let mainPath = UIBezierPath(ovalInRect: CGRect(x: 23, y: 23, width: 12, height: 12))
            indexBackground.setFill()
            mainPath.fill()
            CoordinateStyleKit.borderColor.setStroke()
            mainPath.lineWidth = 1
            mainPath.stroke()
        }


        //// Text Drawing
        let textRect = CGRect(x: 24, y: 24, width: indexSize.width, height: indexSize.height)
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .Center

        let textFontAttributes = [NSFontAttributeName: UIFont.systemFontOfSize(6), NSForegroundColorAttributeName: textColor, NSParagraphStyleAttributeName: textStyle]

        let textTextHeight: CGFloat = NSString(string: indexText).boundingRectWithSize(CGSize(width: textRect.width, height: CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: textFontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, textRect)
        NSString(string: indexText).drawInRect(CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        CGContextRestoreGState(context)
    }

    public class func drawTemporaryWaypoint(backgroundColor backgroundColor: UIColor = UIColor(red: 0.118, green: 0.247, blue: 0.121, alpha: 1.000), textColor: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000), initialsText: String = "...") {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let fillColor2 = UIColor(red: 0.506, green: 0.816, blue: 0.514, alpha: 1.000)
        let strokeColor2 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.250)
        let textForeground = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.400)
        let fillColor3 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let shadowTint = UIColor(red: 0.012, green: 0.012, blue: 0.012, alpha: 1.000)
        let fillColor4 = UIColor(red: 0.012, green: 0.012, blue: 0.012, alpha: 0.800)
        let fillColor5 = UIColor(red: 0.610, green: 0.008, blue: 0.008, alpha: 0.800)

        //// Shadow Declarations
        let shadow = NSShadow()
        shadow.shadowColor = shadowTint.colorWithAlphaComponent(0.5 * CGColorGetAlpha(shadowTint.CGColor))
        shadow.shadowOffset = CGSize(width: 28.6, height: 28.6)
        shadow.shadowBlurRadius = 1
        let shadow2 = NSShadow()
        shadow2.shadowColor = shadowTint.colorWithAlphaComponent(0.5 * CGColorGetAlpha(shadowTint.CGColor))
        shadow2.shadowOffset = CGSize(width: 56.1, height: -0.1)
        shadow2.shadowBlurRadius = 1

        //// Variable Declarations
        let initialsSize = CGSize(width: 32, height: 16)

        //// Group 2
        //// Group 3
        CGContextSaveGState(context)
        CGContextBeginTransparencyLayer(context, nil)

        //// Clip Clip
        let clipPath = UIBezierPath()
        clipPath.moveToPoint(CGPoint(x: 65.86, y: 53))
        clipPath.addLineToPoint(CGPoint(x: 88, y: 53))
        clipPath.addCurveToPoint(CGPoint(x: 96, y: 45.01), controlPoint1: CGPoint(x: 92.41, y: 53), controlPoint2: CGPoint(x: 96, y: 49.42))
        clipPath.addLineToPoint(CGPoint(x: 96, y: 7.99))
        clipPath.addCurveToPoint(CGPoint(x: 88, y: 0), controlPoint1: CGPoint(x: 96, y: 3.58), controlPoint2: CGPoint(x: 92.42, y: 0))
        clipPath.addLineToPoint(CGPoint(x: 8, y: 0))
        clipPath.addCurveToPoint(CGPoint(x: 0, y: 7.99), controlPoint1: CGPoint(x: 3.59, y: 0), controlPoint2: CGPoint(x: 0, y: 3.58))
        clipPath.addLineToPoint(CGPoint(x: 0, y: 45.01))
        clipPath.addCurveToPoint(CGPoint(x: 8, y: 53), controlPoint1: CGPoint(x: 0, y: 49.42), controlPoint2: CGPoint(x: 3.58, y: 53))
        clipPath.addLineToPoint(CGPoint(x: 30.64, y: 53))
        clipPath.addCurveToPoint(CGPoint(x: 28, y: 43), controlPoint1: CGPoint(x: 28.96, y: 50.05), controlPoint2: CGPoint(x: 28, y: 46.64))
        clipPath.addCurveToPoint(CGPoint(x: 48.25, y: 22.75), controlPoint1: CGPoint(x: 28, y: 31.82), controlPoint2: CGPoint(x: 37.07, y: 22.75))
        clipPath.addCurveToPoint(CGPoint(x: 68.5, y: 43), controlPoint1: CGPoint(x: 59.43, y: 22.75), controlPoint2: CGPoint(x: 68.5, y: 31.82))
        clipPath.addCurveToPoint(CGPoint(x: 65.86, y: 53), controlPoint1: CGPoint(x: 68.5, y: 46.64), controlPoint2: CGPoint(x: 67.54, y: 50.05))
        clipPath.closePath()
        clipPath.usesEvenOddFillRule = true;

        clipPath.addClip()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPoint(x: 65.86, y: 53))
        bezierPath.addLineToPoint(CGPoint(x: 88, y: 53))
        bezierPath.addCurveToPoint(CGPoint(x: 96, y: 45.01), controlPoint1: CGPoint(x: 92.41, y: 53), controlPoint2: CGPoint(x: 96, y: 49.42))
        bezierPath.addLineToPoint(CGPoint(x: 96, y: 7.99))
        bezierPath.addCurveToPoint(CGPoint(x: 88, y: 0), controlPoint1: CGPoint(x: 96, y: 3.58), controlPoint2: CGPoint(x: 92.42, y: 0))
        bezierPath.addLineToPoint(CGPoint(x: 8, y: 0))
        bezierPath.addCurveToPoint(CGPoint(x: 0, y: 7.99), controlPoint1: CGPoint(x: 3.59, y: 0), controlPoint2: CGPoint(x: 0, y: 3.58))
        bezierPath.addLineToPoint(CGPoint(x: 0, y: 45.01))
        bezierPath.addCurveToPoint(CGPoint(x: 8, y: 53), controlPoint1: CGPoint(x: 0, y: 49.42), controlPoint2: CGPoint(x: 3.58, y: 53))
        bezierPath.addLineToPoint(CGPoint(x: 30.64, y: 53))
        bezierPath.addCurveToPoint(CGPoint(x: 28, y: 43), controlPoint1: CGPoint(x: 28.96, y: 50.05), controlPoint2: CGPoint(x: 28, y: 46.64))
        bezierPath.addCurveToPoint(CGPoint(x: 48.25, y: 22.75), controlPoint1: CGPoint(x: 28, y: 31.82), controlPoint2: CGPoint(x: 37.07, y: 22.75))
        bezierPath.addCurveToPoint(CGPoint(x: 68.5, y: 43), controlPoint1: CGPoint(x: 59.43, y: 22.75), controlPoint2: CGPoint(x: 68.5, y: 31.82))
        bezierPath.addCurveToPoint(CGPoint(x: 65.86, y: 53), controlPoint1: CGPoint(x: 68.5, y: 46.64), controlPoint2: CGPoint(x: 67.54, y: 50.05))
        bezierPath.closePath()
        bezierPath.usesEvenOddFillRule = true;

        fillColor2.setFill()
        bezierPath.fill()


        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)


        //// Group 4
        CGContextSaveGState(context)
        CGContextBeginTransparencyLayer(context, nil)

        //// Clip Clip 2
        let clip2Path = UIBezierPath()
        clip2Path.moveToPoint(CGPoint(x: 65.86, y: 53))
        clip2Path.addLineToPoint(CGPoint(x: 88, y: 53))
        clip2Path.addCurveToPoint(CGPoint(x: 96, y: 45.01), controlPoint1: CGPoint(x: 92.41, y: 53), controlPoint2: CGPoint(x: 96, y: 49.42))
        clip2Path.addLineToPoint(CGPoint(x: 96, y: 7.99))
        clip2Path.addCurveToPoint(CGPoint(x: 88, y: 0), controlPoint1: CGPoint(x: 96, y: 3.58), controlPoint2: CGPoint(x: 92.42, y: 0))
        clip2Path.addLineToPoint(CGPoint(x: 8, y: 0))
        clip2Path.addCurveToPoint(CGPoint(x: 0, y: 7.99), controlPoint1: CGPoint(x: 3.59, y: 0), controlPoint2: CGPoint(x: 0, y: 3.58))
        clip2Path.addLineToPoint(CGPoint(x: 0, y: 45.01))
        clip2Path.addCurveToPoint(CGPoint(x: 8, y: 53), controlPoint1: CGPoint(x: 0, y: 49.42), controlPoint2: CGPoint(x: 3.58, y: 53))
        clip2Path.addLineToPoint(CGPoint(x: 30.64, y: 53))
        clip2Path.addCurveToPoint(CGPoint(x: 28, y: 43), controlPoint1: CGPoint(x: 28.96, y: 50.05), controlPoint2: CGPoint(x: 28, y: 46.64))
        clip2Path.addCurveToPoint(CGPoint(x: 48.25, y: 22.75), controlPoint1: CGPoint(x: 28, y: 31.82), controlPoint2: CGPoint(x: 37.07, y: 22.75))
        clip2Path.addCurveToPoint(CGPoint(x: 68.5, y: 43), controlPoint1: CGPoint(x: 59.43, y: 22.75), controlPoint2: CGPoint(x: 68.5, y: 31.82))
        clip2Path.addCurveToPoint(CGPoint(x: 65.86, y: 53), controlPoint1: CGPoint(x: 68.5, y: 46.64), controlPoint2: CGPoint(x: 67.54, y: 50.05))
        clip2Path.closePath()
        clip2Path.usesEvenOddFillRule = true;

        clip2Path.addClip()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.moveToPoint(CGPoint(x: 65.86, y: 53))
        bezier4Path.addLineToPoint(CGPoint(x: 88, y: 53))
        bezier4Path.addCurveToPoint(CGPoint(x: 96, y: 45.01), controlPoint1: CGPoint(x: 92.41, y: 53), controlPoint2: CGPoint(x: 96, y: 49.42))
        bezier4Path.addLineToPoint(CGPoint(x: 96, y: 7.99))
        bezier4Path.addCurveToPoint(CGPoint(x: 88, y: 0), controlPoint1: CGPoint(x: 96, y: 3.58), controlPoint2: CGPoint(x: 92.42, y: 0))
        bezier4Path.addLineToPoint(CGPoint(x: 8, y: 0))
        bezier4Path.addCurveToPoint(CGPoint(x: 0, y: 7.99), controlPoint1: CGPoint(x: 3.59, y: 0), controlPoint2: CGPoint(x: 0, y: 3.58))
        bezier4Path.addLineToPoint(CGPoint(x: 0, y: 45.01))
        bezier4Path.addCurveToPoint(CGPoint(x: 8, y: 53), controlPoint1: CGPoint(x: 0, y: 49.42), controlPoint2: CGPoint(x: 3.58, y: 53))
        bezier4Path.addLineToPoint(CGPoint(x: 30.64, y: 53))
        bezier4Path.addCurveToPoint(CGPoint(x: 28, y: 43), controlPoint1: CGPoint(x: 28.96, y: 50.05), controlPoint2: CGPoint(x: 28, y: 46.64))
        bezier4Path.addCurveToPoint(CGPoint(x: 48.25, y: 22.75), controlPoint1: CGPoint(x: 28, y: 31.82), controlPoint2: CGPoint(x: 37.07, y: 22.75))
        bezier4Path.addCurveToPoint(CGPoint(x: 68.5, y: 43), controlPoint1: CGPoint(x: 59.43, y: 22.75), controlPoint2: CGPoint(x: 68.5, y: 31.82))
        bezier4Path.addCurveToPoint(CGPoint(x: 65.86, y: 53), controlPoint1: CGPoint(x: 68.5, y: 46.64), controlPoint2: CGPoint(x: 67.54, y: 50.05))
        bezier4Path.closePath()
        strokeColor2.setStroke()
        bezier4Path.lineWidth = 2
        bezier4Path.stroke()


        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)


        //// Label Drawing
        let labelRect = CGRect(x: 10, y: 2, width: 76, height: 15)
        let labelTextContent = NSString(string: "Set waypoint?")
        let labelStyle = NSMutableParagraphStyle()
        labelStyle.alignment = .Center

        let labelFontAttributes = [NSFontAttributeName: UIFont.systemFontOfSize(9), NSForegroundColorAttributeName: textForeground, NSParagraphStyleAttributeName: labelStyle]

        let labelTextHeight: CGFloat = labelTextContent.boundingRectWithSize(CGSize(width: labelRect.width, height: CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: labelFontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, labelRect)
        labelTextContent.drawInRect(CGRect(x: labelRect.minX, y: labelRect.minY + (labelRect.height - labelTextHeight) / 2, width: labelRect.width, height: labelTextHeight), withAttributes: labelFontAttributes)
        CGContextRestoreGState(context)


        //// Group 5
        CGContextSaveGState(context)
        CGContextBeginTransparencyLayer(context, nil)

        //// Clip Clip 5
        let clip5Path = UIBezierPath()
        clip5Path.moveToPoint(CGPoint(x: 17.43, y: 22.28))
        clip5Path.addLineToPoint(CGPoint(x: 22.97, y: 27.82))
        clip5Path.addLineToPoint(CGPoint(x: 13.06, y: 37.74))
        clip5Path.addLineToPoint(CGPoint(x: 7.51, y: 32.19))
        clip5Path.addLineToPoint(CGPoint(x: 17.43, y: 22.28))
        clip5Path.closePath()
        clip5Path.moveToPoint(CGPoint(x: 13.03, y: 34.67))
        clip5Path.addCurveToPoint(CGPoint(x: 13.36, y: 34.61), controlPoint1: CGPoint(x: 13.14, y: 34.72), controlPoint2: CGPoint(x: 13.27, y: 34.7))
        clip5Path.addLineToPoint(CGPoint(x: 19.93, y: 28.04))
        clip5Path.addCurveToPoint(CGPoint(x: 19.93, y: 27.61), controlPoint1: CGPoint(x: 20.05, y: 27.92), controlPoint2: CGPoint(x: 20.05, y: 27.73))
        clip5Path.addCurveToPoint(CGPoint(x: 19.5, y: 27.62), controlPoint1: CGPoint(x: 19.82, y: 27.5), controlPoint2: CGPoint(x: 19.62, y: 27.5))
        clip5Path.addLineToPoint(CGPoint(x: 13.06, y: 34.06))
        clip5Path.addLineToPoint(CGPoint(x: 10.97, y: 31.97))
        clip5Path.addCurveToPoint(CGPoint(x: 10.55, y: 31.98), controlPoint1: CGPoint(x: 10.86, y: 31.87), controlPoint2: CGPoint(x: 10.67, y: 31.86))
        clip5Path.addCurveToPoint(CGPoint(x: 10.55, y: 32.4), controlPoint1: CGPoint(x: 10.44, y: 32.09), controlPoint2: CGPoint(x: 10.43, y: 32.29))
        clip5Path.addLineToPoint(CGPoint(x: 12.75, y: 34.6))
        clip5Path.addCurveToPoint(CGPoint(x: 13.03, y: 34.67), controlPoint1: CGPoint(x: 12.82, y: 34.67), controlPoint2: CGPoint(x: 12.93, y: 34.7))
        clip5Path.closePath()
        clip5Path.usesEvenOddFillRule = true;

        clip5Path.addClip()


        //// Group 6
        CGContextSaveGState(context)
        CGContextBeginTransparencyLayer(context, nil)

        //// Clip Clip 4
        let clip4Path = UIBezierPath(rect: CGRect(x: -10, y: -13.5, width: 20, height: 27))
                var clip4Transformation = CGAffineTransformIdentity
        clip4Transformation = CGAffineTransformTranslate(clip4Transformation, 14.85, 31.7)
        clip4Transformation = CGAffineTransformRotate(clip4Transformation, 45 * CGFloat(M_PI) / 180)

        clip4Path.applyTransform(clip4Transformation)
        clip4Path.addClip()


        //// Group 7
        CGContextSaveGState(context)
        CGContextBeginTransparencyLayer(context, nil)

        //// Clip Clip 3
        let clip3Path = UIBezierPath(rect: CGRect(x: 8.25, y: 23, width: 14, height: 14))
        clip3Path.addClip()


        //// Bezier 7 Drawing
        let bezier7Path = UIBezierPath()
        bezier7Path.moveToPoint(CGPoint(x: -15.25, y: 6.39))
        bezier7Path.addCurveToPoint(CGPoint(x: -14.92, y: 6.32), controlPoint1: CGPoint(x: -15.14, y: 6.43), controlPoint2: CGPoint(x: -15.01, y: 6.41))
        bezier7Path.addLineToPoint(CGPoint(x: -8.36, y: -0.24))
        bezier7Path.addCurveToPoint(CGPoint(x: -8.35, y: -0.67), controlPoint1: CGPoint(x: -8.24, y: -0.36), controlPoint2: CGPoint(x: -8.23, y: -0.55))
        bezier7Path.addCurveToPoint(CGPoint(x: -8.78, y: -0.67), controlPoint1: CGPoint(x: -8.46, y: -0.79), controlPoint2: CGPoint(x: -8.66, y: -0.79))
        bezier7Path.addLineToPoint(CGPoint(x: -15.23, y: 5.78))
        bezier7Path.addLineToPoint(CGPoint(x: -17.31, y: 3.69))
        bezier7Path.addCurveToPoint(CGPoint(x: -17.73, y: 3.7), controlPoint1: CGPoint(x: -17.42, y: 3.58), controlPoint2: CGPoint(x: -17.61, y: 3.58))
        bezier7Path.addCurveToPoint(CGPoint(x: -17.74, y: 4.11), controlPoint1: CGPoint(x: -17.85, y: 3.81), controlPoint2: CGPoint(x: -17.85, y: 4))
        bezier7Path.addLineToPoint(CGPoint(x: -15.53, y: 6.32))
        bezier7Path.addCurveToPoint(CGPoint(x: -15.25, y: 6.39), controlPoint1: CGPoint(x: -15.46, y: 6.39), controlPoint2: CGPoint(x: -15.35, y: 6.42))
        bezier7Path.closePath()
        bezier7Path.usesEvenOddFillRule = true;

        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, (shadow.shadowColor as! UIColor).CGColor)
        fillColor3.setFill()
        bezier7Path.fill()
        CGContextRestoreGState(context)



        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)


        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)


        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)


        //// Group 8
        CGContextSaveGState(context)
        CGContextBeginTransparencyLayer(context, nil)

        //// Clip Clip 7
        let clip7Path = UIBezierPath()
        clip7Path.moveToPoint(CGPoint(x: 13.03, y: 34.67))
        clip7Path.addCurveToPoint(CGPoint(x: 13.36, y: 34.61), controlPoint1: CGPoint(x: 13.14, y: 34.72), controlPoint2: CGPoint(x: 13.27, y: 34.7))
        clip7Path.addLineToPoint(CGPoint(x: 19.93, y: 28.04))
        clip7Path.addCurveToPoint(CGPoint(x: 19.93, y: 27.61), controlPoint1: CGPoint(x: 20.05, y: 27.92), controlPoint2: CGPoint(x: 20.05, y: 27.73))
        clip7Path.addCurveToPoint(CGPoint(x: 19.5, y: 27.62), controlPoint1: CGPoint(x: 19.82, y: 27.5), controlPoint2: CGPoint(x: 19.62, y: 27.5))
        clip7Path.addLineToPoint(CGPoint(x: 13.06, y: 34.06))
        clip7Path.addLineToPoint(CGPoint(x: 10.97, y: 31.97))
        clip7Path.addCurveToPoint(CGPoint(x: 10.55, y: 31.98), controlPoint1: CGPoint(x: 10.86, y: 31.87), controlPoint2: CGPoint(x: 10.67, y: 31.86))
        clip7Path.addCurveToPoint(CGPoint(x: 10.55, y: 32.4), controlPoint1: CGPoint(x: 10.44, y: 32.09), controlPoint2: CGPoint(x: 10.43, y: 32.29))
        clip7Path.addLineToPoint(CGPoint(x: 12.75, y: 34.6))
        clip7Path.addCurveToPoint(CGPoint(x: 13.03, y: 34.67), controlPoint1: CGPoint(x: 12.82, y: 34.67), controlPoint2: CGPoint(x: 12.93, y: 34.7))
        clip7Path.closePath()
        clip7Path.usesEvenOddFillRule = true;

        clip7Path.addClip()


        //// Group 9
        CGContextSaveGState(context)
        CGContextBeginTransparencyLayer(context, nil)

        //// Clip Clip 6
        let clip6Path = UIBezierPath(rect: CGRect(x: 8.25, y: 23, width: 14, height: 14))
        clip6Path.addClip()


        //// Rectangle 4 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 15.25, 30)
        CGContextRotateCTM(context, 45 * CGFloat(M_PI) / 180)

        let rectangle4Path = UIBezierPath(rect: CGRect(x: -6.93, y: -10, width: 13.85, height: 20))
        fillColor4.setFill()
        rectangle4Path.fill()

        CGContextRestoreGState(context)


        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)


        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)


        //// Group 10
        CGContextSaveGState(context)
        CGContextBeginTransparencyLayer(context, nil)

        //// Clip Clip 9
        let clip9Path = UIBezierPath()
        clip9Path.moveToPoint(CGPoint(x: 74.25, y: 23))
        clip9Path.addLineToPoint(CGPoint(x: 88.25, y: 23))
        clip9Path.addLineToPoint(CGPoint(x: 88.25, y: 37))
        clip9Path.addLineToPoint(CGPoint(x: 74.25, y: 37))
        clip9Path.addLineToPoint(CGPoint(x: 74.25, y: 23))
        clip9Path.closePath()
        clip9Path.moveToPoint(CGPoint(x: 81.66, y: 30))
        clip9Path.addLineToPoint(CGPoint(x: 86.16, y: 25.5))
        clip9Path.addCurveToPoint(CGPoint(x: 86.16, y: 25.09), controlPoint1: CGPoint(x: 86.28, y: 25.37), controlPoint2: CGPoint(x: 86.28, y: 25.2))
        clip9Path.addCurveToPoint(CGPoint(x: 85.75, y: 25.09), controlPoint1: CGPoint(x: 86.06, y: 24.98), controlPoint2: CGPoint(x: 85.87, y: 24.97))
        clip9Path.addLineToPoint(CGPoint(x: 81.25, y: 29.59))
        clip9Path.addLineToPoint(CGPoint(x: 76.75, y: 25.09))
        clip9Path.addCurveToPoint(CGPoint(x: 76.34, y: 25.09), controlPoint1: CGPoint(x: 76.62, y: 24.97), controlPoint2: CGPoint(x: 76.45, y: 24.97))
        clip9Path.addCurveToPoint(CGPoint(x: 76.34, y: 25.5), controlPoint1: CGPoint(x: 76.23, y: 25.19), controlPoint2: CGPoint(x: 76.22, y: 25.38))
        clip9Path.addLineToPoint(CGPoint(x: 80.84, y: 30))
        clip9Path.addLineToPoint(CGPoint(x: 76.34, y: 34.5))
        clip9Path.addCurveToPoint(CGPoint(x: 76.34, y: 34.91), controlPoint1: CGPoint(x: 76.22, y: 34.63), controlPoint2: CGPoint(x: 76.22, y: 34.8))
        clip9Path.addCurveToPoint(CGPoint(x: 76.75, y: 34.91), controlPoint1: CGPoint(x: 76.44, y: 35.02), controlPoint2: CGPoint(x: 76.63, y: 35.03))
        clip9Path.addLineToPoint(CGPoint(x: 81.25, y: 30.41))
        clip9Path.addLineToPoint(CGPoint(x: 85.75, y: 34.91))
        clip9Path.addCurveToPoint(CGPoint(x: 86.16, y: 34.91), controlPoint1: CGPoint(x: 85.88, y: 35.03), controlPoint2: CGPoint(x: 86.05, y: 35.03))
        clip9Path.addCurveToPoint(CGPoint(x: 86.16, y: 34.5), controlPoint1: CGPoint(x: 86.27, y: 34.81), controlPoint2: CGPoint(x: 86.28, y: 34.62))
        clip9Path.addLineToPoint(CGPoint(x: 81.66, y: 30))
        clip9Path.closePath()
        clip9Path.usesEvenOddFillRule = true;

        clip9Path.addClip()


        //// Group 11
        CGContextSaveGState(context)
        CGContextBeginTransparencyLayer(context, nil)

        //// Clip Clip 8
        let clip8Path = UIBezierPath(rect: CGRect(x: 68.25, y: 17, width: 28, height: 28))
        clip8Path.addClip()


        //// Bezier 10 Drawing
        let bezier10Path = UIBezierPath()
        bezier10Path.moveToPoint(CGPoint(x: 25.66, y: 30))
        bezier10Path.addLineToPoint(CGPoint(x: 30.16, y: 25.5))
        bezier10Path.addCurveToPoint(CGPoint(x: 30.16, y: 25.09), controlPoint1: CGPoint(x: 30.28, y: 25.37), controlPoint2: CGPoint(x: 30.28, y: 25.2))
        bezier10Path.addCurveToPoint(CGPoint(x: 29.75, y: 25.09), controlPoint1: CGPoint(x: 30.06, y: 24.98), controlPoint2: CGPoint(x: 29.87, y: 24.97))
        bezier10Path.addLineToPoint(CGPoint(x: 25.25, y: 29.59))
        bezier10Path.addLineToPoint(CGPoint(x: 20.75, y: 25.09))
        bezier10Path.addCurveToPoint(CGPoint(x: 20.34, y: 25.09), controlPoint1: CGPoint(x: 20.62, y: 24.97), controlPoint2: CGPoint(x: 20.45, y: 24.97))
        bezier10Path.addCurveToPoint(CGPoint(x: 20.34, y: 25.5), controlPoint1: CGPoint(x: 20.23, y: 25.19), controlPoint2: CGPoint(x: 20.22, y: 25.38))
        bezier10Path.addLineToPoint(CGPoint(x: 24.84, y: 30))
        bezier10Path.addLineToPoint(CGPoint(x: 20.34, y: 34.5))
        bezier10Path.addCurveToPoint(CGPoint(x: 20.34, y: 34.91), controlPoint1: CGPoint(x: 20.22, y: 34.63), controlPoint2: CGPoint(x: 20.22, y: 34.8))
        bezier10Path.addCurveToPoint(CGPoint(x: 20.75, y: 34.91), controlPoint1: CGPoint(x: 20.44, y: 35.02), controlPoint2: CGPoint(x: 20.63, y: 35.03))
        bezier10Path.addLineToPoint(CGPoint(x: 25.25, y: 30.41))
        bezier10Path.addLineToPoint(CGPoint(x: 29.75, y: 34.91))
        bezier10Path.addCurveToPoint(CGPoint(x: 30.16, y: 34.91), controlPoint1: CGPoint(x: 29.88, y: 35.03), controlPoint2: CGPoint(x: 30.05, y: 35.03))
        bezier10Path.addCurveToPoint(CGPoint(x: 30.16, y: 34.5), controlPoint1: CGPoint(x: 30.27, y: 34.81), controlPoint2: CGPoint(x: 30.28, y: 34.62))
        bezier10Path.addLineToPoint(CGPoint(x: 25.66, y: 30))
        bezier10Path.closePath()
        bezier10Path.usesEvenOddFillRule = true;

        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow2.shadowOffset, shadow2.shadowBlurRadius, (shadow2.shadowColor as! UIColor).CGColor)
        fillColor3.setFill()
        bezier10Path.fill()
        CGContextRestoreGState(context)



        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)


        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)


        //// Bezier 12 Drawing
        let bezier12Path = UIBezierPath()
        bezier12Path.moveToPoint(CGPoint(x: 81.66, y: 30))
        bezier12Path.addLineToPoint(CGPoint(x: 86.16, y: 25.5))
        bezier12Path.addCurveToPoint(CGPoint(x: 86.16, y: 25.09), controlPoint1: CGPoint(x: 86.28, y: 25.37), controlPoint2: CGPoint(x: 86.28, y: 25.2))
        bezier12Path.addCurveToPoint(CGPoint(x: 85.75, y: 25.09), controlPoint1: CGPoint(x: 86.06, y: 24.98), controlPoint2: CGPoint(x: 85.87, y: 24.97))
        bezier12Path.addLineToPoint(CGPoint(x: 81.25, y: 29.59))
        bezier12Path.addLineToPoint(CGPoint(x: 76.75, y: 25.09))
        bezier12Path.addCurveToPoint(CGPoint(x: 76.34, y: 25.09), controlPoint1: CGPoint(x: 76.62, y: 24.97), controlPoint2: CGPoint(x: 76.45, y: 24.97))
        bezier12Path.addCurveToPoint(CGPoint(x: 76.34, y: 25.5), controlPoint1: CGPoint(x: 76.23, y: 25.19), controlPoint2: CGPoint(x: 76.22, y: 25.38))
        bezier12Path.addLineToPoint(CGPoint(x: 80.84, y: 30))
        bezier12Path.addLineToPoint(CGPoint(x: 76.34, y: 34.5))
        bezier12Path.addCurveToPoint(CGPoint(x: 76.34, y: 34.91), controlPoint1: CGPoint(x: 76.22, y: 34.63), controlPoint2: CGPoint(x: 76.22, y: 34.8))
        bezier12Path.addCurveToPoint(CGPoint(x: 76.75, y: 34.91), controlPoint1: CGPoint(x: 76.44, y: 35.02), controlPoint2: CGPoint(x: 76.63, y: 35.03))
        bezier12Path.addLineToPoint(CGPoint(x: 81.25, y: 30.41))
        bezier12Path.addLineToPoint(CGPoint(x: 85.75, y: 34.91))
        bezier12Path.addCurveToPoint(CGPoint(x: 86.16, y: 34.91), controlPoint1: CGPoint(x: 85.88, y: 35.03), controlPoint2: CGPoint(x: 86.05, y: 35.03))
        bezier12Path.addCurveToPoint(CGPoint(x: 86.16, y: 34.5), controlPoint1: CGPoint(x: 86.27, y: 34.81), controlPoint2: CGPoint(x: 86.28, y: 34.62))
        bezier12Path.addLineToPoint(CGPoint(x: 81.66, y: 30))
        bezier12Path.closePath()
        bezier12Path.usesEvenOddFillRule = true;

        fillColor5.setFill()
        bezier12Path.fill()




        //// Index Drawing
        let indexPath = UIBezierPath(ovalInRect: CGRect(x: 30.25, y: 25, width: 36, height: 36))
        backgroundColor.setFill()
        indexPath.fill()
        CoordinateStyleKit.borderColor.setStroke()
        indexPath.lineWidth = 1
        indexPath.stroke()


        //// Initials Drawing
        let initialsRect = CGRect(x: 33.25, y: 35, width: initialsSize.width, height: initialsSize.height)
        let initialsStyle = NSMutableParagraphStyle()
        initialsStyle.alignment = .Center

        let initialsFontAttributes = [NSFontAttributeName: UIFont.systemFontOfSize(19), NSForegroundColorAttributeName: textColor, NSParagraphStyleAttributeName: initialsStyle]

        let initialsTextHeight: CGFloat = NSString(string: initialsText).boundingRectWithSize(CGSize(width: initialsRect.width, height: CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: initialsFontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, initialsRect)
        NSString(string: initialsText).drawInRect(CGRect(x: initialsRect.minX, y: initialsRect.minY + (initialsRect.height - initialsTextHeight) / 2, width: initialsRect.width, height: initialsTextHeight), withAttributes: initialsFontAttributes)
        CGContextRestoreGState(context)
    }

    //// Generated Images

    public class func imageOfRoundedContact(backgroundColor backgroundColor: UIColor = UIColor(red: 0.118, green: 0.247, blue: 0.121, alpha: 1.000), textColor: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000), initialsText: String = "...", showIndex: Bool = true, indexText: String = "QQ") -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 36, height: 36), false, 0)
            CoordinateStyleKit.drawRoundedContact(backgroundColor: backgroundColor, textColor: textColor, initialsText: initialsText, showIndex: showIndex, indexText: indexText)

        let imageOfRoundedContact = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfRoundedContact
    }

    public class func imageOfTemporaryWaypoint(backgroundColor backgroundColor: UIColor = UIColor(red: 0.118, green: 0.247, blue: 0.121, alpha: 1.000), textColor: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000), initialsText: String = "...") -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 96, height: 61), false, 0)
            CoordinateStyleKit.drawTemporaryWaypoint(backgroundColor: backgroundColor, textColor: textColor, initialsText: initialsText)

        let imageOfTemporaryWaypoint = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfTemporaryWaypoint
    }

}



extension UIColor {
    func colorWithHue(newHue: CGFloat) -> UIColor {
        var saturation: CGFloat = 1.0, brightness: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getHue(nil, saturation: &saturation, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: newHue, saturation: saturation, brightness: brightness, alpha: alpha)
    }
    func colorWithSaturation(newSaturation: CGFloat) -> UIColor {
        var hue: CGFloat = 1.0, brightness: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getHue(&hue, saturation: nil, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: hue, saturation: newSaturation, brightness: brightness, alpha: alpha)
    }
    func colorWithBrightness(newBrightness: CGFloat) -> UIColor {
        var hue: CGFloat = 1.0, saturation: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getHue(&hue, saturation: &saturation, brightness: nil, alpha: &alpha)
        return UIColor(hue: hue, saturation: saturation, brightness: newBrightness, alpha: alpha)
    }
    func colorWithAlpha(newAlpha: CGFloat) -> UIColor {
        var hue: CGFloat = 1.0, saturation: CGFloat = 1.0, brightness: CGFloat = 1.0
        self.getHue(&hue, saturation: &saturation, brightness: &brightness, alpha: nil)
        return UIColor(hue: hue, saturation: saturation, brightness: brightness, alpha: newAlpha)
    }
    func colorWithHighlight(highlight: CGFloat) -> UIColor {
        var red: CGFloat = 1.0, green: CGFloat = 1.0, blue: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-highlight) + highlight, green: green * (1-highlight) + highlight, blue: blue * (1-highlight) + highlight, alpha: alpha * (1-highlight) + highlight)
    }
    func colorWithShadow(shadow: CGFloat) -> UIColor {
        var red: CGFloat = 1.0, green: CGFloat = 1.0, blue: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-shadow), green: green * (1-shadow), blue: blue * (1-shadow), alpha: alpha * (1-shadow) + shadow)
    }
}
